//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KermesseElysium.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBKermesseElysiumEntities : DbContext
    {
        public DBKermesseElysiumEntities()
            : base("name=DBKermesseElysiumEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArqueoCaja> ArqueoCaja { get; set; }
        public virtual DbSet<ArqueoCajaDet> ArqueoCajaDet { get; set; }
        public virtual DbSet<CategoriaGasto> CategoriaGasto { get; set; }
        public virtual DbSet<CategoriaProducto> CategoriaProducto { get; set; }
        public virtual DbSet<Comunidad> Comunidad { get; set; }
        public virtual DbSet<ControlBono> ControlBono { get; set; }
        public virtual DbSet<Denominacion> Denominacion { get; set; }
        public virtual DbSet<Gasto> Gasto { get; set; }
        public virtual DbSet<IngresoComunidad> IngresoComunidad { get; set; }
        public virtual DbSet<IngresoComunidadDet> IngresoComunidadDet { get; set; }
        public virtual DbSet<Kermesse> Kermesse { get; set; }
        public virtual DbSet<ListaPrecio> ListaPrecio { get; set; }
        public virtual DbSet<ListaPrecioDet> ListaPrecioDet { get; set; }
        public virtual DbSet<Moneda> Moneda { get; set; }
        public virtual DbSet<Opcion> Opcion { get; set; }
        public virtual DbSet<Parroquia> Parroquia { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<RolOpcion> RolOpcion { get; set; }
        public virtual DbSet<RolUsuario> RolUsuario { get; set; }
        public virtual DbSet<TasaCambio> TasaCambio { get; set; }
        public virtual DbSet<TasaCambioDet> TasaCambioDet { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<vw_rolopcion> vw_rolopcion { get; set; }
        public virtual DbSet<vw_gasto> vw_gasto { get; set; }
        public virtual DbSet<vw_ingresocomunidad> vw_ingresocomunidad { get; set; }
        public virtual DbSet<vw_ingresocomunidaddet> vw_ingresocomunidaddet { get; set; }
        public virtual DbSet<vw_kermesse> vw_kermesse { get; set; }
        public virtual DbSet<vw_listaprecio> vw_listaprecio { get; set; }
        public virtual DbSet<vw_listapreciodet> vw_listapreciodet { get; set; }
        public virtual DbSet<vw_producto> vw_producto { get; set; }
        public virtual DbSet<vw_rolusuario> vw_rolusuario { get; set; }
        public virtual DbSet<VW_arqueoCaja> VW_arqueoCaja { get; set; }
        public virtual DbSet<vw_tasacambio> vw_tasacambio { get; set; }
        public virtual DbSet<vw_denominacion> vw_denominacion { get; set; }
        public virtual DbSet<vw_tasacambiodet> vw_tasacambiodet { get; set; }
        public virtual DbSet<vw_ArqueoCajaDetalle> vw_ArqueoCajaDetalle { get; set; }
    
        public virtual int sp_updatemoneda(Nullable<int> id, string nombre, string signo, Nullable<int> estado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var signoParameter = signo != null ?
                new ObjectParameter("signo", signo) :
                new ObjectParameter("signo", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updatemoneda", idParameter, nombreParameter, signoParameter, estadoParameter);
        }
    }
}
